# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а
# указать явно, в программе.

list_test = [34, "строка", None, True, 34.1]
for element in list_test:
    print(f" {element} тип {type(element)}")


# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1,
# 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов
# необходимо использовать функцию input().

list_test = []
element = "empty"
while(element != "стоп"):
    element = input("Введите значения списка. Чтобы закончить напишите 'стоп'")
    # хотел без этого, но тогда в список записывается слово стоп, поэтому с ифом
    if element == "стоп":
        break
    list_test.append(element)

print(f"Первоначальный список {list_test}")
for i in range(0, (2 * (len(list_test) // 2)), 2):
    a = list_test[i]
    list_test[i] = list_test[i+1]
    list_test[i+1] = a
print(f"Измененный список {list_test}")



# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима,
# весна, лето, осень). Напишите решения через list и через dict.

list_season = ["", "Зима", "Зима", "Весна", "Весна", "Весна", "Лето", "Лето", "Лето", "Осень", "Осень", "Осень", "Зима"]
list_season_dic = {
    1: "Зима",
    2: "Зима",
    3: "Весна",
    4: "Весна",
    5: "Весна",
    6: "Лето",
    7: "Лето",
    8: "Лето",
    9: "Осень",
    10: "Осень",
    11: "Осень",
    12: "Зима"
}
name_season = int(input("Введи месяц от 1 до 12 и узнаешь время года"))
print(f"Через лист {list_season[name_season]}")
print(f"Через словарь {list_season_dic.get(name_season)}")


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки
# необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

list_worlds = []
text = input("Введите слова через пробел")
list_worlds = text.split()
for ind, el in enumerate(list_worlds, 1):
    if len(el)>10:
        print(ind, el[0:10])
    else:
        print(ind, el)


# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый
# элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

#В цикл не засовываю, т.к. нет задачи формировать какой-то длинный рейтинг
my_list = [7, 5, 3, 3, 2]
rating = int(input("Введите рейтинг"))
my_list.append(rating)
my_list.sort(reverse=True)
print(my_list)


# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно,
# т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например
# название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

data = []
name = ""
price = ""
quantity = ""
ed = ""
unit_production = {}
question = ""
n = 0
while(question != "да"):
    name = input("Напишите название продукции")
    price = float(input("Введите цену"))
    quantity = int(input("Введите кол-во"))
    ed = input("Напишите единицу измерения (шт,л,кг и др)")
    unit_production = {"Название": name, "Цена": price, "Количество": question, "ед": ed}
    n += 1
    data.append((n, unit_production))
    question = input("Закончили запись? да/нет")
analytics_dic = {}
name_list = []
price_list = []
quantity_list = []
ed_list = []
for item in data:
    name_list.append(item[1].get("Название"))
    price_list.append(item[1].get("Цена"))
    quantity_list.append(item[1].get("Количество"))
    ed_list.append(item[1].get("ед"))
analytics_dic = {"Название":name_list, "Цена":price_list, "Количество":price_list, "ед":ed_list}
#Можно было бы сделать единицы множеством, чтобы не повторялись, но там наружится сортировка, поэтому пока так)
print(analytics_dic)