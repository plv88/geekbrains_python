# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

# def sum_func(var1, var2):
#     return var1 / var2
#
# number_1 = int(input("Введите первое число"))
# number_2 = int(input("Введите второе число"))
# while(number_2 == 0):
#     number_2 = int(input("На ноль делить нельзя. Введите второе число"))
#
# print(sum_func(number_1, number_2))


# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия,
# год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

# def about_fun(name, surname, year, city, email, phone):
#     print(f"Имя: {name}. Фамилия: {surname}. Год рождения: {year}. Город проживания: {city}. "
#           f"Электронный адрес: {email}. Телефон: {phone}.")
#
# #Проверки никакие не делаем, даже не переводим в инт, т.к. не стоит такой задачи
# name_var = input("Введите ваше имя")
# surname_var = input("Введите вашу фамилию")
# year_var = input("Введите год рождения")
# city_var = input("Введите город проживания")
# email_var = input("Введите электронную почту")
# phone_var = input("Введите телефон")
# #Намеренно поменяли местами переменными, чтобы показать корректность работы именнованных переменных
# about_fun(name=name_var, year=year_var, surname=surname_var, city=city_var, email=email_var, phone=phone_var)

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших
# двух аргументов.


# #Запрашивать не надо, уже радует. Напишем через иф, так очень просто) Может есть какая функция, не знаю, было бы
# #больше переменных, задумался бы
# def my_func_1(var1, var2, var3):
#     minvar = min(var1, var2, var3)
#     if minvar == var1:
#         return var2 + var3
#     elif minvar == var2:
#         return var1 + var3
#     else:
#         return var1 + var2
#
# print(my_func_1(120, 89, 100))



# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить
# возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания
# необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй —
# более сложная реализация без оператора **, предусматривающая использование цикла.

def my_func_01(x, y):
    return x**y

def my_func_02(x, y):
    b = 1
    t = 0
    while(t < abs(y)):
        b = b * 1/x
        t = t+1
    return b

print(my_func_01(2, -6))
print(my_func_02(2, -6))


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться
# сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь
# введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ,
# выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить
# сумму этих чисел к полученной ранее сумме и после этого завершить программу.


# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с
# прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово
# состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с
# заглавной буквы. Необходимо использовать написанную ранее функцию int_func().